<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        #videos {
            display: grid;
            grid-template-columns: 1fr;
            height: 100vh;
            overflow: hidden;
        }

        .video-player {
            background-color: black;
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .smallFrame {
            position: fixed;
            bottom: 100px;
            right: 20px;
            height: 170px;
            width: 300px;
            border-radius: 6px;
            z-index: 10;
        }

        #controls {
            position: fixed;
            bottom: 30px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 1.5em;
        }

        .control-container {
            background-color: #6df966;
            padding: 25px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
        }

        .control-container svg {
            height: 35px;
            width: 35px;
        }

        #leave-btn {
            background-color: rgb(255, 80, 80, 1);
        }

        @media screen and (max-width: 600px) {
            .smallFrame {
                height: 80px;
                width: 120px;
            }

            .control-container img {
                height: 20px;
                width: 20px;
            }
        }

        #chatform {
            background-color: white;
            padding: 0.75rem 1.25rem;
            display: flex;
            gap: 0.75rem;
        }

        #messagebox {
            flex: 1;
            border: 1px solid #e5e7eb;
            border-radius: 0.5rem;
            padding: 0.5rem 0.75rem;
            font-size: 0.95rem;
            height: 2.5rem;
        }

        #chatform button {
            padding: 0.75rem 1.5rem;
            font-size: 1rem;
        }

        #incoming-call .bg-white {
            padding: 2rem;
            border-radius: 1rem;
        }

        #incoming-call button {
            padding: 0.75rem 1.5rem;
            margin: 0.5rem;
            font-size: 1rem;
        }

        #incoming-call p {
            margin-bottom: 1.5rem;
            font-size: 1.25rem;
        }

        main {
            padding: 1.5rem;
        }

        .max-w-xs {
            max-width: 20rem;
            padding: 0.875rem 1.25rem;
        }

        .flex.my-2 {
            margin-top: 1rem;
            margin-bottom: 1rem;
        }

        #video-call-btn {
            background-color: #4361ee;
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            font-size: 0.9rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: background-color 0.2s;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        #video-call-btn:hover {
            background-color: #3730a3;
        }

        #video-call-btn::before {
            content: "ðŸ“¹";
            font-size: 1.1rem;
        }

        .header-controls {
            position: fixed;
            top: 10px;
            right: 10px;
            display: flex;
            align-items: center;
            z-index: 100;
        }

        .status-indicator {
            position: fixed;
            top: 6px;
            left: 80px;
            display: flex;
            align-items: center;
            gap: 8px;
            background-color: white;
            padding: 8px 16px;
            border-radius: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .status-dot {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background-color: #ff4444; /* Default offline color */
            position: relative;
        }

        .status-dot.online {
            background-color: #4CAF50;
        }

        .status-dot::after {
            content: '';
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            animation: pulse 2s infinite;
            left: 0;
            top: 0;
        }

        .status-text {
            font-size: 0.9rem;
            color: #666;
            font-weight: 500;
        }

        @keyframes pulse {
            0% {
                transform: scale(1);
                opacity: 0.8;
            }
            70% {
                transform: scale(2);
                opacity: 0;
            }
            100% {
                transform: scale(1);
                opacity: 0;
            }
        }

        /* Add this to make status indicator responsive */
        @media screen and (max-width: 600px) {
            .status-indicator {
                top: 10px;
                left: 60px;
                padding: 6px 12px;
            }
        }

        #friends-list {
            position: fixed;
            top: 60px;
            left: 20px;
            background: white;
            padding: 1rem;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            max-width: 300px;
            z-index: 100;
        }

        #friends-list h3 {
            margin-bottom: 1rem;
            font-size: 1.2rem;
            color: #333;
        }

        .friend-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0.5rem;
            border-radius: 4px;
            margin-bottom: 0.5rem;
            background: #f8f9fa;
            transition: background-color 0.2s;
        }

        .friend-item:hover {
            background: #e9ecef;
        }

        .friend-item button {
            padding: 0.25rem 0.75rem;
            border-radius: 4px;
            background: #4361ee;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 0.9rem;
        }

        .friend-item button:hover {
            background: #3730a3;
        }

        #add-friend-form {
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid #dee2e6;
        }

        #add-friend-form input {
            width: 100%;
            padding: 0.5rem;
            margin-bottom: 0.5rem;
            border: 1px solid #dee2e6;
            border-radius: 4px;
        }

        #add-friend-form button {
            width: 100%;
            padding: 0.5rem;
            background: #4361ee;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        #add-friend-form button:hover {
            background: #3730a3;
        }

        #user-id-display {
            margin-bottom: 1rem;
            padding: 0.5rem;
            background: #f8f9fa;
            border-radius: 4px;
            font-family: monospace;
            word-break: break-all;
        }
    </style>
    <link href="/css/style.css" rel="stylesheet">
</head>

<body class="flex flex-col h-dvh bg-gray-200">
    <%- include('partials/header') %>


    <div class="status-indicator">
        <div class="status-dot"></div>
        <span class="status-text">Offline</span>
    </div>
    <div class="fixed videoblock hidden z-[222] w-full h-svh">
        <div id="videos">
            <video class="video-player" id="localVideo" autoplay muted playsinline></video>
            <video class="video-player" id="remoteVideo" autoplay playsinline></video>
        </div>
        <div id="controls">
            <div class="control-container" id="cameraButton">
                <svg width="21" height="14" viewBox="0 0 21 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path
                        d="M20.525 2.149C20.365 2.05 20.183 2 20 2C19.847 2 19.694 2.035 19.553 2.105L17 3.382V3C17 1.346 15.654 0 14 0H3C1.346 0 0 1.346 0 3V11C0 12.654 1.346 14 3 14H14C15.654 14 17 12.654 17 11V10.618L19.553 11.894C19.694 11.965 19.847 12 20 12C20.183 12 20.365 11.95 20.525 11.851C20.82 11.668 21 11.347 21 11V3C21 2.653 20.82 2.332 20.525 2.149ZM5 8.5C4.171 8.5 3.5 7.829 3.5 7C3.5 6.171 4.171 5.5 5 5.5C5.829 5.5 6.5 6.171 6.5 7C6.5 7.829 5.829 8.5 5 8.5Z"
                        fill="white" />
                </svg>
            </div>

            <div class="control-container" id="hangup">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                    <path d="M0 0h24v24H0z" fill="red" />
                    <path
                        d="M20 15.5c-.78 0-1.55-.3-2.12-.88l-1.43-1.42a4.007 4.007 0 0 0-5.54 0l-1.43 1.42A2.983 2.983 0 0 1 4 15.5c-.78 0-1.55-.3-2.12-.88A2.983 2.983 0 0 1 1 12.5a2.983 2.983 0 0 1 .88-2.12l7-7a4.007 4.007 0 0 1 5.54 0l7 7c.58.58.88 1.34.88 2.12s-.3 1.55-.88 2.12c-.58.58-1.34.88-2.12.88z" />
                </svg>
            </div>

            <div class="control-container" id="micButton">
                <svg width="20" height="20" viewBox="0 0 14 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" clip-rule="evenodd"
                        d="M7 12.5C8.7 12.5 10 11.2 10 9.5V3.5C10 1.8 8.7 0.5 7 0.5C5.3 0.5 4 1.8 4 3.5V9.5C4 11.2 5.3 12.5 7 12.5ZM12.3 9.5C12.3 12.5 9.8 14.6 7 14.6C4.2 14.6 1.7 12.5 1.7 9.5H0C0 12.9 2.7 15.7 6 16.2V19.5H8V16.2C11.3 15.7 14 12.9 14 9.5H12.3Z"
                        fill="white" />
                </svg>
            </div>
        </div>
    </div>
    <div id="incoming-call"
        class="fixed hidden z-[222] w-full h-dvh bg-gray-900 bg-opacity-75 flex items-center justify-center">
        <div class="bg-white p-8 rounded-md text-center">
            <p class="mb-4">Incoming Call...</p>
            <button id="accept-call" class="bg-green-500 text-white py-2 px-4 rounded-md">Accept</button>
            <button id="reject-call" class="bg-red-500 text-white py-2 px-4 rounded-md ml-2">Reject</button>
        </div>

    </div>
    <main class="flex-1 p-4 overflow-y-auto relative" id="message-container">
        <div
            class="text-zinc-400 absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-2/3 text-center nobody">
            bhagwaan kasam koi nahi hai yaha, ruko shaayad koi
            aajaye.</div>
    </main>
    <form id="chatform" class="bg-white p-4 flex">
        <input type="hidden" id="userid" value="">
        <input type="text" id="messagebox"
            class="flex-1 border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            placeholder="Type a message">
        <button type="submit"
            class="ml-2 bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700">Send</button>
    </form>
    <video id="local-video" class="hidden" autoplay></video>
    <video id="remote-video" class="hidden" autoplay></video>

    <script src="https://cdn.socket.io/4.7.5/socket.io.min.js"
        integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO"
        crossorigin="anonymous"></script>

    <script>
        const socket = io();
        let currentUserId = '';
        

        const chatform = document.querySelector("#chatform");
        const messagebox = document.querySelector("#messagebox");
        const messagecontainer = document.querySelector("#message-container");

        let room;

        // Get room ID from URL if it exists
        const urlParams = new URLSearchParams(window.location.search);
        const roomId = urlParams.get('room');

        // Modify your existing socket.emit("joinroom") call
        socket.emit("joinroom", roomId);

        // Update the status indicator function
        function updateStatusIndicator(isOnline) {
            const statusDot = document.querySelector('.status-dot');
            const statusText = document.querySelector('.status-text');
            
            if (isOnline) {
                statusDot.classList.add('online');
                statusText.textContent = 'Online';
            } else {
                statusDot.classList.remove('online');
                statusText.textContent = 'Offline';
            }
        }

        // Initially set to offline
        updateStatusIndicator(false);

        socket.on("joined", function (roomname) {
            room = roomname;
            document.querySelector(".nobody").classList.add("hidden");
            updateStatusIndicator(true); // Set status to online when both connected
        })

        socket.on("message", function (message) {
            receiveMessage(message);
        })

        chatform.addEventListener("submit", function (event) {
            event.preventDefault();
            socket.emit("message", { room: room, message: messagebox.value });
            attachMessage(messagebox.value);
            messagebox.value = "";
        })

        function attachMessage(message) {
            const userMessageContainer = document.createElement('div');
            userMessageContainer.classList.add('flex', 'my-2', 'justify-end');

            const userMessageDiv = document.createElement('div');
            userMessageDiv.classList.add('bg-blue-500', 'text-white', 'p-3', 'rounded-lg', 'max-w-xs');

            const userMessageText = document.createElement('p');
            userMessageText.textContent = message;

            userMessageDiv.appendChild(userMessageText);

            userMessageContainer.appendChild(userMessageDiv);

            document.getElementById('message-container').appendChild(userMessageContainer);

            document.querySelector("#message-container").scrollTop = document.querySelector("#message-container").scrollHeight;
        }

        function receiveMessage(message) {
            const messageContainer = document.createElement('div');
            messageContainer.classList.add('flex', 'my-2', 'justify-start');

            const messageDiv = document.createElement('div');
            messageDiv.classList.add('bg-gray-300', 'text-gray-800', 'p-3', 'rounded-lg', 'max-w-xs');

            const messageText = document.createElement('p');
            messageText.textContent = message;

            messageDiv.appendChild(messageText);

            messageContainer.appendChild(messageDiv);

            document.getElementById('message-container').appendChild(messageContainer);
            document.querySelector("#message-container").scrollTop = document.querySelector("#message-container").scrollHeight;
        }

        // WEBRTC START
        let localStream;
        let remoteStream;
        let peerConnection;
        let inCall = false;

        const rtcSettings = {
            iceServers: [{ urls: "stun:stun.l.google.com:19302" }],
        };

        const initialize = async () => {
            socket.on("signalingMessage", handleSignalingMessage);

            try {
                localStream = await navigator.mediaDevices.getUserMedia({
                    audio: true,
                    video: true
                });
                document.querySelector("#localVideo").srcObject = localStream;
                document.querySelector("#localVideo").style.display = "block";

                initiateOffer();

                inCall = true;
            } catch (err) {
                console.log("Rejected by browser: " + err);
            }
        }

        const initiateOffer = async () => {
            await createPeerConnection();
            try {
                const offer = await peerConnection.createOffer();
                await peerConnection.setLocalDescription(offer);
                socket.emit("signalingMessage", {
                    room,
                    message: JSON.stringify({
                        type: "offer",
                        offer
                    })
                })
            } catch (err) {
                console.log("error in creating offer" + err);
            }
        }

        const createPeerConnection = () => {
            peerConnection = new RTCPeerConnection(rtcSettings);

            remoteStream = new MediaStream();

            document.querySelector("#remoteVideo").srcObject = remoteStream;
            document.querySelector("#remoteVideo").style.display = "block";
            document.querySelector("#localVideo").classList.add("smallFrame");

            localStream.getTracks().forEach(track => {
                peerConnection.addTrack(track, localStream);
            })

            peerConnection.ontrack = (event) => {
                event.streams[0].getTracks().forEach(track => {
                    remoteStream.addTrack(track);
                })
            }

            peerConnection.onicecandidate = (event) => {
                if (event.candidate) {
                    console.log("Sending Ice Candidates");

                    socket.emit("signalingMessage", {
                        room,
                        message: JSON.stringify({
                            type: "candidate",
                            candidate: event.candidate
                        })
                    })
                }
            }

            peerConnection.onconnectionstatechange = () => {
                console.log("connection state change hui ", peerConnection.connectionState);
            }
        }

        const handleSignalingMessage = async (message) => {
            const { type, offer, answer, candidate } = JSON.parse(message);
            if (type === "offer") handleOffer(offer);
            if (type === "answer") handleAnswer(answer);
            if (type === "candidate" && peerConnection) {
                try { await peerConnection.addIceCandidate(candidate); }
                catch (error) {
                    console.log(error);
                }
            }
            if (type === "hangup") {
                hangup()
            }
        }

        const handleOffer = async (offer) => {
            await createPeerConnection();
            try {
                await peerConnection.setRemoteDescription(offer);
                const answer = await peerConnection.createAnswer();
                await peerConnection.setLocalDescription(answer);
                socket.emit("signalingMessage", { room, message: JSON.stringify({ type: "answer", answer }) });
                inCall = true;
            } catch (error) {
                console.log("failed to handle offer");
            }
        }

        const handleAnswer = async (answer) => {
            try {
                await peerConnection.setRemoteDescription(answer);
            } catch (error) {
                console.log("failed to handle answer");
            }
        }

        document.querySelector("#video-call-btn")
            .addEventListener("click", async function () {
                console.log("starting vc wait");
                await initialize();
                document.querySelector(".videoblock").classList.remove("hidden");
                socket.emit("startVideoCall", { room })
            })

        socket.on("incomingCall", function () {
            console.log("hey");
            document.querySelector("#incoming-call").classList.remove("hidden");
        })

        socket.on("callAccepted", function () {
            initialize();
            document.querySelector(".videoblock").classList.remove("hidden");
            document.querySelector("#localVideo").style.display = "block";
            document.querySelector("#remoteVideo").style.display = "block";
        })

        document.querySelector("#accept-call")
            .addEventListener("click", async function () {
                document.querySelector("#incoming-call").classList.add("hidden");
                await initialize();
                document.querySelector(".videoblock").classList.remove("hidden");
                socket.emit("acceptCall", { room })
            })

        document.querySelector("#reject-call")
            .addEventListener("click", function () {
                document.querySelector("#incoming-call").classList.add("hidden");
                socket.emit("rejectCall", { room })
            })

        socket.on("callRejected", function () {
            alert("Call rejected by other user");
        })

        document.querySelector("#hangup")
            .addEventListener("click", function () {
                hangup();
            })

        function hangup() {
            if (peerConnection) {
                peerConnection.close();
                peerConnection = null;
                localStream.getTracks().forEach(track => track.stop());

                document.querySelector(".videoblock").classList.add("hidden");
                socket.emit("signalingMessage", { room, message: JSON.stringify({ type: "hangup" }) });
                inCall = false;
            }
        }

        // Handle disconnect
        socket.on("disconnect", function() {
            updateStatusIndicator(false);
        })

        socket.on("partnerDisconnected", function() {
            // Update status to offline BEFORE clearing messages
            updateStatusIndicator(false);
            
            // Show the "nobody here" message and clear messages
            document.querySelector(".nobody").classList.remove("hidden");
            messagecontainer.innerHTML = `
                <div class="text-zinc-400 absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-2/3 text-center nobody">
                    bhagwaan kasam koi nahi hai yaha, ruko shaayad koi aajaye.
                </div>
            `;

            // If in a call, end it
            if (inCall) {
                hangup();
            }

         
            room = null;

            socket.emit("joinroom");
        });

        socket.on("privateRoomJoined", function() {
            if (localStorage.getItem('notificationsEnabled') === 'true') {
                new Notification("New User Joined!", {
                    body: "Someone has joined your private chat room.",
                    icon: "/path/to/your/icon.png" // Optional: Add your notification icon
                });
            }
        });
    </script>
</body>

</html>
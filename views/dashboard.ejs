
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .friend-request {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.3);
            display: none;
            z-index: 1000;
        }
        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            display: none;
            z-index: 999;
        }
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px;
            border-radius: 5px;
            color: white;
            display: none;
            z-index: 1001;
        }
        .notification.error {
            background-color: #dc3545;
        }
        .notification.success {
            background-color: #198754;
        }
        .online-status {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 5px;
        }
        .online {
            background-color: #28a745;
        }
        .offline {
            background-color: #dc3545;
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <div class="row">
            <div class="col-md-8 offset-md-2">
                <div class="card">
                    <div class="card-header">
                        <h2>Welcome <%= user.name %></h2>
                    </div>
                    <div class="card-body">
                        <p>Your ID: <strong id="userId"><%= user.uniqueId %></strong> 
                            <button class="btn btn-sm btn-outline-secondary" onclick="copyUserId()">Copy ID</button>
                        </p>
                        
                        <!-- Friend Search Section -->
                        <div class="mb-4">
                            <h4>Find Friends</h4>
                            <div class="input-group mb-3">
                                <input type="text" id="search-input" class="form-control" placeholder="Search users...">
                            </div>
                            <div id="search-results" class="list-group mb-4">
                                <!-- Search results will be populated here -->
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="friendId" class="form-label">Enter Friend's ID:</label>
                            <input type="text" class="form-control" id="friendId">
                            <button class="btn btn-primary mt-2" onclick="sendFriendRequest()">Send Friend Request</button>
                        </div>
                        <hr>
                        <h3>Your Friends</h3>
                        <div id="friendsList">
                            <% friends.forEach(friend => { %>
                                <div class="d-flex justify-content-between align-items-center mb-2" id="friend-<%= friend.uniqueId %>">
                                    <div>
                                        <span class="online-status offline"></span>
                                        <span><%= friend.name %> (<%= friend.uniqueId %>)</span>
                                    </div>
                                    <button class="btn btn-success btn-sm chat-btn" onclick="startChat('<%= friend.uniqueId %>')" disabled>Chat</button>
                                </div>
                            <% }); %>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Friend Request Popup -->
    <div class="overlay" id="overlay"></div>
    <div class="friend-request" id="friendRequest">
        <h4>Friend Request</h4>
        <p id="requestMessage"></p>
        <button class="btn btn-success me-2" onclick="acceptFriendRequest()">Accept</button>
        <button class="btn btn-danger" onclick="rejectFriendRequest()">Reject</button>
    </div>

    <!-- Notification -->
    <div class="notification" id="notification"></div>

    <!-- Bio Card Modal -->
    <div class="modal fade" id="bio-card-modal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">User Profile</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="bio-card-content">
                    <!-- Bio card content will be populated here -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="send-friend-request">Send Friend Request</button>
                </div>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Get the current hostname and port
        const currentHost = window.location.hostname;
        const currentPort = window.location.port;
        const socketUrl = `${window.location.protocol}//${currentHost}${currentPort ? ':' + currentPort : ''}`;

        // Connect to friend-specific socket for online status
        const socket = io(socketUrl, {
            path: '/socket.io',
            withCredentials: true,
            transports: ['websocket', 'polling'],
            reconnection: true,
            reconnectionAttempts: 5,
            reconnectionDelay: 1000
        });

        // Store current user's uniqueId
        const myUniqueId = '<%= user.uniqueId %>';
        let onlineFriends = new Set();
        let pendingRequestId = null;

        // Connect to socket.io
        socket.on('connect', () => {
            console.log('Connected to friend socket. My ID:', myUniqueId);
            socket.emit('userOnline', { uniqueId: myUniqueId });
        });

        socket.on('connect_error', (error) => {
            console.error('Socket connection error:', error);
        });

        socket.on('reconnect', (attemptNumber) => {
            console.log('Reconnected after', attemptNumber, 'attempts');
            socket.emit('userOnline', { uniqueId: myUniqueId });
        });

        // Handle friend status updates
        socket.on('friendStatus', (data) => {
            const { friendId, isOnline } = data;
            console.log('Friend status update:', { friendId, isOnline });
            
            const friendElement = document.getElementById(`friend-${friendId}`);
            if (friendElement) {
                const statusDot = friendElement.querySelector('.online-status');
                const chatButton = friendElement.querySelector('.chat-btn');
                
                if (isOnline) {
                    onlineFriends.add(friendId);
                    statusDot.classList.remove('offline');
                    statusDot.classList.add('online');
                    chatButton.disabled = false;
                } else {
                    onlineFriends.delete(friendId);
                    statusDot.classList.remove('online');
                    statusDot.classList.add('offline');
                    chatButton.disabled = true;
                }
            }
        });

        socket.on('error', (data) => {
            showNotification(data.message, 'error');
        });

        socket.on('friendRequest', (data) => {
            pendingRequestId = data.from;
            document.getElementById('requestMessage').textContent = `${data.name} wants to be your friend!`;
            document.getElementById('overlay').style.display = 'block';
            document.getElementById('friendRequest').style.display = 'block';
        });

        socket.on('friendRequestAccepted', (data) => {
            showNotification(`${data.name} accepted your friend request!`, 'success');
            setTimeout(() => location.reload(), 2000);
        });

        socket.on('friendRequestRejected', (data) => {
            showNotification(`${data.name} rejected your friend request.`, 'error');
        });

        function sendFriendRequest() {
            const friendId = document.getElementById('friendId').value.trim();
            if (!friendId) {
                showNotification('Please enter a friend ID', 'error');
                return;
            }
            if (friendId === myUniqueId) {
                showNotification('You cannot send a friend request to yourself', 'error');
                return;
            }
            socket.emit('sendFriendRequest', { to: friendId });
            showNotification('Friend request sent!', 'success');
        }

        function acceptFriendRequest() {
            socket.emit('acceptFriendRequest', { from: pendingRequestId });
            closeRequestPopup();
            showNotification('Friend request accepted!', 'success');
            setTimeout(() => location.reload(), 2000);
        }

        function rejectFriendRequest() {
            socket.emit('rejectFriendRequest', { from: pendingRequestId });
            closeRequestPopup();
            showNotification('Friend request rejected', 'error');
        }

        function closeRequestPopup() {
            document.getElementById('overlay').style.display = 'none';
            document.getElementById('friendRequest').style.display = 'none';
            pendingRequestId = null;
        }

        function startChat(friendId) {
            // Only allow chat if friend is online
            if (onlineFriends.has(friendId)) {
                window.location.href = `/friend-chat/${friendId}`;
            } else {
                showNotification('This friend is currently offline', 'error');
            }
        }

        function copyUserId() {
            const userId = document.getElementById('userId').textContent;
            navigator.clipboard.writeText(userId)
                .then(() => showNotification('ID copied to clipboard!', 'success'))
                .catch(() => showNotification('Failed to copy ID', 'error'));
        }

        function showNotification(message, type) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = `notification ${type}`;
            notification.style.display = 'block';
            
            setTimeout(() => {
                notification.style.display = 'none';
            }, 3000);
        }

        // Friend search functionality
        let selectedUser = null;
        const bioModal = new bootstrap.Modal(document.getElementById('bio-card-modal'));

        document.getElementById('search-input').addEventListener('input', debounce(async (e) => {
            const searchQuery = e.target.value;
            try {
                const response = await fetch(`/auth/search-users?q=${encodeURIComponent(searchQuery)}`);
                const users = await response.json();
                displaySearchResults(users);
            } catch (error) {
                console.error('Error searching users:', error);
                showNotification('Error searching users', 'error');
            }
        }, 300));

        function displaySearchResults(users) {
            const searchResults = document.getElementById('search-results');
            searchResults.innerHTML = '';

            users.forEach(user => {
                const userCard = document.createElement('div');
                userCard.className = 'list-group-item list-group-item-action';
                userCard.innerHTML = `
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="mb-1">${user.name}</h6>
                            <small class="text-muted">@${user.username}</small>
                        </div>
                        <button class="btn btn-outline-primary btn-sm view-profile">View Profile</button>
                    </div>
                `;

                userCard.querySelector('.view-profile').addEventListener('click', () => {
                    showBioCard(user);
                });

                searchResults.appendChild(userCard);
            });
        }

        function showBioCard(user) {
            selectedUser = user;
            const bioContent = document.getElementById('bio-card-content');
            
            bioContent.innerHTML = `
                <div class="mb-3">
                    <h5>${user.name}</h5>
                    <p class="text-muted">@${user.username}</p>
                </div>
                <div class="mb-3">
                    <strong>Bio:</strong>
                    <p>${user.bio || "No bio available"}</p>
                </div>
                <div>
                    <strong>Member since:</strong>
                    <p>${new Date(user.createdAt).toLocaleDateString()}</p>
                </div>
            `;
            
            bioModal.show();
        }
        function sendRequestToSelectedUser() {
    if (!selectedUser || !selectedUser.uniqueId) {
        showNotification('No user selected', 'error');
        return;
    }
    if (selectedUser.uniqueId === myUniqueId) {
        showNotification('You cannot send a friend request to yourself', 'error');
        return;
    }
    socket.emit('sendFriendRequest', { to: selectedUser.uniqueId });
    showNotification('Friend request sent!', 'success');
}

        document.getElementById('send-friend-request').addEventListener('click', async () => {
            if (!selectedUser) return;
            
            try {
                sendRequestToSelectedUser();
            } catch (error) {
                console.error('Error sending friend request:', error);
                showNotification('Failed to send friend request', 'error');
            }
        });

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }
    </script>
</body>
</html>

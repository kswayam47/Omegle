<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Private Chat</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        #videos {
            display: grid;
            grid-template-columns: 1fr;
            height: 100vh;
            overflow: hidden;
        }

        .video-player {
            background-color: black;
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .smallFrame {
            position: fixed;
            bottom: 100px;
            right: 20px;
            height: 170px;
            width: 300px;
            border-radius: 6px;
            z-index: 10;
        }

        #controls {
            position: fixed;
            bottom: 30px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 1.5em;
        }

        .control-container {
            background-color: #6df966;
            padding: 25px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
        }

        .control-container svg {
            height: 35px;
            width: 35px;
        }

        #leave-btn {
            background-color: rgb(255, 80, 80, 1);
        }

        #friends-list {
            position: fixed;
            top: 20px;
            left: 20px;
            background: white;
            padding: 1.5rem;
            border-radius: 12px;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            width: 300px;
            max-height: calc(100vh - 40px);
            overflow-y: auto;
            z-index: 50;
        }

        .friend-item {
            position: relative;
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0.75rem;
            background: #f3f4f6;
            border-radius: 8px;
            margin-bottom: 0.5rem;
            transition: all 0.2s;
        }

        .friend-item:hover {
            background: #e5e7eb;
        }

        .unread-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background: #ef4444;
            color: white;
            border-radius: 9999px;
            padding: 2px 8px;
            font-size: 0.75rem;
            font-weight: 600;
            z-index: 10;
        }

        .unread-message {
            font-size: 0.75rem;
            color: #6b7280;
            margin-top: 2px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 150px;
        }

        .friend-info {
            display: flex;
            flex-direction: column;
        }

        .friend-name {
            font-weight: 600;
            color: #1f2937;
        }

        .friend-username {
            font-size: 0.875rem;
            color: #6b7280;
        }

        .chat-btn {
            background: #4f46e5;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-size: 0.875rem;
            transition: all 0.2s;
        }

        .chat-btn:hover {
            background: #4338ca;
        }

        #user-info {
            background: #f3f4f6;
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1.5rem;
        }

        #user-id {
            font-family: monospace;
            background: #e5e7eb;
            padding: 0.5rem;
            border-radius: 4px;
            margin-top: 0.5rem;
            word-break: break-all;
            font-size: 0.875rem;
        }

        #add-friend-form {
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid #e5e7eb;
        }

        #add-friend-form input {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            margin-bottom: 0.75rem;
        }

        #add-friend-form button {
            width: 100%;
            background: #10b981;
            color: white;
            padding: 0.75rem;
            border-radius: 6px;
            font-weight: 500;
            transition: all 0.2s;
        }

        #add-friend-form button:hover {
            background: #059669;
        }

        @media screen and (max-width: 600px) {
            .smallFrame {
                height: 80px;
                width: 120px;
            }

            .control-container img {
                height: 20px;
                width: 20px;
            }

            #friends-list {
                width: calc(100% - 40px);
            }
        }
    </style>
</head>

<body class="min-h-screen">
    <!-- Friends List -->
    <div id="friends-list">
        <div id="user-info">
            <h3 class="text-lg font-semibold text-gray-900">Welcome, <%= user.name %></h3>
            <div id="user-id">
                Your ID: <%= user.uniqueId %>
            </div>
        </div>

        <!-- Friend Search Section -->
        <div class="mt-6 p-4 bg-white rounded-lg shadow-md">
            <h4 class="text-lg font-semibold mb-4">Find Friends</h4>
            <div class="mb-4">
                <input type="text" id="search-input" placeholder="Search users..." 
                    class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>
            <div id="search-results" class="space-y-4">
                <!-- Search results will be populated here -->
            </div>
        </div>

        <!-- Bio Card Modal -->
        <div id="bio-card-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center">
            <div class="bg-white p-6 rounded-lg shadow-xl max-w-md w-full">
                <div id="bio-card-content">
                    <!-- Bio card content will be populated here -->
                </div>
                <div class="mt-4 flex justify-end space-x-2">
                    <button id="close-bio-card" class="px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300">Close</button>
                    <button id="send-friend-request" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">Send Friend Request</button>
                </div>
            </div>
        </div>

        <h3 class="text-lg font-semibold text-gray-900 mb-4">Your Friends</h3>
        <div id="friends-container">
            <% friends.forEach(function(friend) { %>
                <div class="friend-item" data-friend-id="<%= friend.uniqueId %>">
                    <div class="friend-info">
                        <span class="friend-name"><%= friend.name %></span>
                        <span class="friend-username text-sm text-gray-500">@<%= friend.username %></span>
                        <div class="unread-message-container"></div>
                    </div>
                    <button class="chat-btn bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded" onclick="openChat('<%= friend.uniqueId %>')">
                        Chat
                    </button>
                </div>
            <% }); %>
        </div>

        <form id="add-friend-form">
            <input type="text" id="friend-id" placeholder="Enter friend's ID" required>
            <button type="submit">Add Friend</button>
        </form>
    </div>

    <!-- Video Elements -->
    <div id="videos">
        <video class="video-player" id="user-1" autoplay playsinline></video>
        <video class="video-player smallFrame" id="user-2" autoplay playsinline></video>
    </div>

    <!-- Controls -->
    <div id="controls">
        <div class="control-container" id="camera-btn">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M5 4h-3v-1h3v1zm10.93 0l.812 1.219c.743 1.115 1.987 1.781 3.328 1.781h1.93v13h-20v-13h3.93c1.341 0 2.585-.666 3.328-1.781l.812-1.219h5.86zm1.07-2h-8l-1.406 2.109c-.371.557-.995.891-1.664.891h-5.93v17h24v-17h-3.93c-.669 0-1.293-.334-1.664-.891l-1.406-2.109zm-11 8c0-.552-.447-1-1-1s-1 .448-1 1 .447 1 1 1 1-.448 1-1zm7 0c1.654 0 3 1.346 3 3s-1.346 3-3 3-3-1.346-3-3 1.346-3 3-3zm0-2c-2.761 0-5 2.239-5 5s2.239 5 5 5 5-2.239 5-5-2.239-5-5-5z"/></svg>
        </div>
        <div class="control-container" id="mic-btn">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M12 2c1.103 0 2 .897 2 2v7c0 1.103-.897 2-2 2s-2-.897-2-2v-7c0-1.103.897-2 2-2zm0-2c-2.209 0-4 1.791-4 4v7c0 2.209 1.791 4 4 4s4-1.791 4-4v-7c0-2.209-1.791-4-4-4zm8 9v2c0 4.418-3.582 8-8 8s-8-3.582-8-8v-2h2v2c0 3.309 2.691 6 6 6s6-2.691 6-6v-2h2zm-7 13v-2h-2v2h-4v2h10v-2h-4z"/></svg>
        </div>
        <div class="control-container" id="leave-btn">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M16 10v-5l8 7-8 7v-5h-8v-4h8zm-16-8v20h14v-2h-12v-16h12v-2h-14z"/></svg>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        let currentUserId = '<%= user.uniqueId %>';

        // Connect to socket and set user ID
        socket.emit('userOnline', { uniqueId: currentUserId });

        // Request unread messages on load
        socket.emit('getUnreadMessages');

        // Handle unread messages
        socket.on('unreadMessages', (unreadInfo) => {
            unreadInfo.forEach(info => {
                const friendItem = document.querySelector(`[data-friend-id="${info.from}"]`);
                if (friendItem) {
                    updateFriendItemWithUnread(friendItem, info);
                }
            });
        });

        // Handle new message notifications
        socket.on('newMessage', (data) => {
            console.log('New message received:', data);
            const friendItem = document.querySelector(`[data-friend-id="${data.from}"]`);
            if (friendItem) {
                const info = {
                    count: 1,
                    lastMessage: data.message,
                    senderName: data.senderName
                };
                updateFriendItemWithUnread(friendItem, info, true);
            }
        });

        function updateFriendItemWithUnread(friendItem, info, increment = false) {
            // Handle badge
            let badge = friendItem.querySelector('.unread-badge');
            if (!badge && (info.count > 0 || increment)) {
                badge = document.createElement('div');
                badge.classList.add('unread-badge');
                friendItem.appendChild(badge);
            }
            
            if (badge) {
                const currentCount = parseInt(badge.textContent || '0');
                badge.textContent = increment ? (currentCount + 1) : info.count;
                
                // Remove badge if count is 0
                if (parseInt(badge.textContent) <= 0) {
                    badge.remove();
                }
            }

            // Handle message preview
            let messageContainer = friendItem.querySelector('.unread-message-container');
            if (!messageContainer) {
                messageContainer = document.createElement('div');
                messageContainer.classList.add('unread-message-container');
                friendItem.querySelector('.friend-info').appendChild(messageContainer);
            }

            let messagePreview = messageContainer.querySelector('.unread-message');
            if (!messagePreview) {
                messagePreview = document.createElement('div');
                messagePreview.classList.add('unread-message');
                messageContainer.appendChild(messagePreview);
            }

            if (info.count > 0 || increment) {
                messagePreview.textContent = `New message from ${info.senderName}: ${info.lastMessage}`;
                messagePreview.style.display = 'block';
            } else {
                messagePreview.style.display = 'none';
            }
        }

        // Mark messages as read when opening chat
        function openChat(friendId) {
            socket.emit('markMessagesAsRead', { fromUser: friendId });
            window.location.href = `/friend-chat/${friendId}`;
        }

        // Add friend form submission
        document.getElementById('add-friend-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const friendId = document.getElementById('friend-id').value;
            
            try {
                const response = await fetch('/auth/add-relation', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ referralId: friendId })
                });
                
                const data = await response.json();
                if (data.success) {
                    alert('Friend added successfully!');
                    location.reload(); // Reload to update friends list
                } else {
                    alert(data.message);
                }
            } catch (error) {
                alert('An error occurred. Please try again.');
            }
        });

        // Start chat with friend
        function startChatWithFriend(friendId) {
            socket.emit('joinFriendChat', { friendId });
        }

        // WebRTC configuration
        const servers = {
            iceServers: [
                {
                    urls: ['stun:stun1.l.google.com:19302', 'stun:stun2.l.google.com:19302']
                }
            ]
        };

        let init = async () => {
            localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
            document.getElementById('user-1').srcObject = localStream;
        };

        let createPeerConnection = async () => {
            peerConnection = new RTCPeerConnection(servers);

            remoteStream = new MediaStream();
            document.getElementById('user-2').srcObject = remoteStream;

            localStream.getTracks().forEach((track) => {
                peerConnection.addTrack(track, localStream);
            });

            peerConnection.ontrack = async (event) => {
                event.streams[0].getTracks().forEach((track) => {
                    remoteStream.addTrack(track);
                });
            };

            peerConnection.onicecandidate = async (event) => {
                if (event.candidate) {
                    socket.emit('candidate', { candidate: event.candidate });
                }
            };
        };

        let createOffer = async () => {
            await createPeerConnection();
            let offer = await peerConnection.createOffer();
            await peerConnection.setLocalDescription(offer);
            socket.emit('offer', { offer: offer });
        };

        let createAnswer = async (offer) => {
            await createPeerConnection();
            await peerConnection.setRemoteDescription(offer);
            let answer = await peerConnection.createAnswer();
            await peerConnection.setLocalDescription(answer);
            socket.emit('answer', { answer: answer });
        };

        let addAnswer = async (answer) => {
            if (!peerConnection.currentRemoteDescription) {
                await peerConnection.setRemoteDescription(answer);
            }
        };

        // Socket event handlers
        socket.on('user-joined', createOffer);
        socket.on('offer', async ({ offer }) => await createAnswer(offer));
        socket.on('answer', async ({ answer }) => await addAnswer(answer));
        socket.on('candidate', async ({ candidate }) => {
            if (peerConnection) {
                await peerConnection.addIceCandidate(candidate);
            }
        });

        // Control buttons
        let toggleCamera = async () => {
            let videoTrack = localStream.getTracks().find(track => track.kind === 'video');
            if (videoTrack.enabled) {
                videoTrack.enabled = false;
                document.getElementById('camera-btn').style.backgroundColor = 'rgb(255, 80, 80)';
            } else {
                videoTrack.enabled = true;
                document.getElementById('camera-btn').style.backgroundColor = '#6df966';
            }
        };

        let toggleMic = async () => {
            let audioTrack = localStream.getTracks().find(track => track.kind === 'audio');
            if (audioTrack.enabled) {
                audioTrack.enabled = false;
                document.getElementById('mic-btn').style.backgroundColor = 'rgb(255, 80, 80)';
            } else {
                audioTrack.enabled = true;
                document.getElementById('mic-btn').style.backgroundColor = '#6df966';
            }
        };

        document.getElementById('camera-btn').addEventListener('click', toggleCamera);
        document.getElementById('mic-btn').addEventListener('click', toggleMic);
        document.getElementById('leave-btn').addEventListener('click', () => {
            window.location.href = '/';
        });

        init();

        // Friend search functionality
        let selectedUser = null;

        document.getElementById('search-input').addEventListener('input', debounce(async (e) => {
            const searchQuery = e.target.value;
            try {
                const response = await fetch(`/auth/search-users?q=${encodeURIComponent(searchQuery)}`);
                const users = await response.json();
                displaySearchResults(users);
            } catch (error) {
                console.error('Error searching users:', error);
            }
        }, 300));

        function displaySearchResults(users) {
            const searchResults = document.getElementById('search-results');
            searchResults.innerHTML = '';

            users.forEach(user => {
                const userCard = document.createElement('div');
                userCard.className = 'p-4 bg-gray-50 rounded-lg hover:bg-gray-100 cursor-pointer';
                userCard.innerHTML = `
                    <div class="flex items-center justify-between">
                        <div>
                            <h5 class="font-semibold">${user.name}</h5>
                            <p class="text-sm text-gray-600">@${user.username}</p>
                        </div>
                        <button class="view-profile px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600">
                            View Profile
                        </button>
                    </div>
                `;

                userCard.querySelector('.view-profile').addEventListener('click', () => {
                    showBioCard(user);
                });

                searchResults.appendChild(userCard);
            });
        }

        function showBioCard(user) {
            selectedUser = user;
            const bioCard = document.getElementById('bio-card-modal');
            const bioContent = document.getElementById('bio-card-content');
            
            bioContent.innerHTML = `
                <h3 class="text-xl font-semibold mb-4">${user.name}'s Profile</h3>
                <p class="mb-2"><span class="font-medium">Username:</span> @${user.username}</p>
                <p class="mb-2"><span class="font-medium">Member since:</span> ${new Date(user.createdAt).toLocaleDateString()}</p>
            `;
            
            bioCard.classList.remove('hidden');
        }

        document.getElementById('close-bio-card').addEventListener('click', () => {
            document.getElementById('bio-card-modal').classList.add('hidden');
            selectedUser = null;
        });
        function sendRequestToSelectedUser() {
    if (!selectedUser || !selectedUser.uniqueId) {
        showNotification('No user selected', 'error');
        return;
    }
    if (selectedUser.uniqueId === myUniqueId) {
        showNotification('You cannot send a friend request to yourself', 'error');
        return;
    }
    socket.emit('sendFriendRequest', { to: selectedUser.uniqueId });
    showNotification('Friend request sent!', 'success');
}

        document.getElementById('send-friend-request').addEventListener('click', async () => {
            if (!selectedUser) return;
            
            try {
                sendRequestToSelectedUser();
            } catch (error) {
                console.error('Error sending friend request:', error);
                alert('Failed to send friend request');
            }
        });

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }
    </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat with <%= friend.name %></title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="/socket.io/socket.io.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        /* Custom scrollbar for message container */
        #message-container::-webkit-scrollbar {
            width: 6px;
        }
        #message-container::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        #message-container::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 3px;
        }
        #message-container::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
        /* Ensure message container takes available height */
        #message-container {
            height: calc(100vh - 160px);
            max-height: calc(100vh - 160px);
            padding-bottom: 16px; /* Add padding to prevent last message from being hidden */
        }
        @media (max-width: 640px) {
            #message-container {
                height: calc(100vh - 140px);
                max-height: calc(100vh - 140px);
                padding-bottom: 80px; /* Increased padding on mobile to ensure visibility */
            }
            .chat-container {
                height: 100%;
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
            }
            #chatform {
                position: fixed;
                bottom: 0;
                left: 0;
                right: 0;
                background: white;
                padding: 8px;
                box-shadow: 0 -2px 10px rgba(0,0,0,0.1);
                z-index: 10;
            }
            /* Add padding to the chat area to prevent content from being hidden behind the fixed form */
            #chatArea {
                padding-bottom: 60px;
            }
        }
    </style>
</head>
<body class="bg-gray-100 h-screen overflow-hidden">
    <div class="chat-container w-full h-full">
        <div class="bg-white h-full flex flex-col">
            <!-- Header -->
            <div class="bg-blue-600 text-white p-3 sm:p-4 flex justify-between items-center z-10">
                <div class="flex items-center">
                    <a href="/auth/dashboard" class="mr-3 sm:mr-4">
                        <i class="fas fa-arrow-left"></i>
                    </a>
                    <div>
                        <h1 class="text-lg sm:text-xl font-bold"><%= friend.name %></h1>
                        <p class="text-xs sm:text-sm" id="status">Online</p>
                    </div>
                </div>
                <div class="flex space-x-2 sm:space-x-4">
                    <button id="videoCallBtn" class="bg-blue-500 hover:bg-blue-700 text-white px-3 py-2 rounded text-sm sm:text-base">
                        <i class="fas fa-video"></i>
                    </button>
                    <button id="audioCallBtn" class="bg-blue-500 hover:bg-blue-700 text-white px-3 py-2 rounded text-sm sm:text-base">
                        <i class="fas fa-phone"></i>
                    </button>
                </div>
            </div>

            <!-- Chat and Video Area -->
            <div class="flex-1 flex overflow-hidden relative">
                <!-- Chat Area -->
                <div class="flex-1 flex flex-col h-full" id="chatArea">
                    <div id="message-container" class="flex-1 overflow-y-auto space-y-2 sm:space-y-4 px-3 sm:px-4">
                        <!-- Messages will be added here -->
                    </div>
                    <form id="chatform" class="flex items-center space-x-2 w-full bg-white p-2 sm:p-3 border-t">
                        <input type="file" id="imageInput" accept="image/*" class="hidden">
                        <button type="button" onclick="document.getElementById('imageInput').click()" 
                            class="p-2 hover:bg-gray-100 rounded-full flex-shrink-0">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 sm:h-6 sm:w-6 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>
                        </button>
                        <input type="text" id="messagebox" 
                            class="flex-1 border rounded-lg px-3 py-2 sm:px-4 sm:py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm sm:text-base"
                            placeholder="Type your message...">
                        <button type="submit" 
                            class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex-shrink-0 text-sm sm:text-base">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </form>
                </div>

                <!-- Video Call Area (hidden by default) -->
                <div id="videoArea" class="hidden w-full sm:w-1/2 bg-gray-900 p-4 flex flex-col">
                    <div id="remoteVideo" class="flex-1 bg-black rounded-lg mb-4">
                        <video class="w-full h-full object-cover rounded-lg" autoplay playsinline></video>
                    </div>
                    <div id="localVideo" class="w-1/4 absolute bottom-8 right-8 bg-black rounded-lg">
                        <video class="w-full h-full object-cover rounded-lg" autoplay playsinline muted></video>
                    </div>
                    <div class="flex justify-center space-x-4 mt-4">
                        <button id="toggleMicBtn" class="bg-gray-600 hover:bg-gray-700 text-white p-3 rounded-full">
                            <i class="fas fa-microphone"></i>
                        </button>
                        <button id="toggleVideoBtn" class="bg-gray-600 hover:bg-gray-700 text-white p-3 rounded-full">
                            <i class="fas fa-video"></i>
                        </button>
                        <button id="endCallBtn" class="bg-red-600 hover:bg-red-700 text-white p-3 rounded-full">
                            <i class="fas fa-phone-slash"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Get the current hostname and port
        const currentHost = window.location.hostname;
        const currentPort = window.location.port;
        const socketUrl = `${window.location.protocol}//${currentHost}${currentPort ? ':' + currentPort : ''}`;

        // Connect to socket
        const socket = io(socketUrl, {
            path: '/socket.io',
            withCredentials: true,
            transports: ['websocket', 'polling'],
            reconnection: true,
            reconnectionAttempts: 5,
            reconnectionDelay: 1000
        });

        // Store current user's uniqueId and friend's uniqueId
        const myUniqueId = '<%= user.uniqueId %>';
        const friendId = '<%= friend.uniqueId %>';
        let peerConnection = null;
        let localStream = null;

        // Connect to socket.io
        socket.on('connect', () => {
            console.log('Connected to socket in chat. My ID:', myUniqueId);
            // Send online status immediately on connect
            socket.emit('userOnline', { uniqueId: myUniqueId });
            // Join private room for chat
            socket.emit('joinPrivateRoom', { friendId });
        });

        socket.on('connect_error', (error) => {
            console.error('Socket connection error:', error);
        });

        socket.on('reconnect', (attemptNumber) => {
            console.log('Reconnected after', attemptNumber, 'attempts');
            socket.emit('userOnline', { uniqueId: myUniqueId });
            socket.emit('joinPrivateRoom', { friendId });
        });

        // Handle messages
        socket.on('message', (message) => {
            receiveMessage(message);
        });

        // Add image handling code
        document.getElementById('imageInput').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (!file) return;

            if (!file.type.startsWith('image/')) {
                alert('Please select an image file');
                return;
            }

            const reader = new FileReader();
            reader.onload = function(event) {
                const imageData = event.target.result;
                socket.emit('message', `<img>${imageData}`);
                attachMessage(`<img>${imageData}`);
            };
            reader.readAsDataURL(file);
            e.target.value = '';
        });

        const chatform = document.getElementById('chatform');
        const messagebox = document.getElementById('messagebox');

        chatform.addEventListener("submit", function (event) {
            event.preventDefault();
            const message = messagebox.value.trim();
            if (message) {
                socket.emit('message', message);
                attachMessage(message);
                messagebox.value = "";
            }
        });

        function attachMessage(message) {
            const userMessageContainer = document.createElement('div');
            userMessageContainer.classList.add('flex', 'my-2', 'justify-end');

            const userMessageDiv = document.createElement('div');
            
            if (message.startsWith('<img>')) {
                userMessageDiv.classList.add('bg-blue-600', 'p-2', 'rounded-lg', 'max-w-xs');
                const img = document.createElement('img');
                img.src = message.substring(5);
                img.classList.add('max-w-full', 'rounded');
                userMessageDiv.appendChild(img);
            } else {
                userMessageDiv.classList.add('bg-blue-600', 'text-white', 'p-3', 'rounded-lg', 'max-w-xs', 'break-words');
                const userMessageText = document.createElement('p');
                userMessageText.textContent = message;
                userMessageDiv.appendChild(userMessageText);
            }

            userMessageContainer.appendChild(userMessageDiv);
            document.getElementById('message-container').appendChild(userMessageContainer);
            scrollToBottom();
        }

        function receiveMessage(message) {
            const messageContainer = document.createElement('div');
            messageContainer.classList.add('flex', 'my-2', 'justify-start');

            const messageDiv = document.createElement('div');
            
            if (message.startsWith('<img>')) {
                messageDiv.classList.add('bg-gray-100', 'p-2', 'rounded-lg', 'max-w-xs');
                const img = document.createElement('img');
                img.src = message.substring(5);
                img.classList.add('max-w-full', 'rounded');
                messageDiv.appendChild(img);
            } else {
                messageDiv.classList.add('bg-gray-100', 'text-gray-800', 'p-3', 'rounded-lg', 'max-w-xs', 'break-words');
                const messageText = document.createElement('p');
                messageText.textContent = message;
                messageDiv.appendChild(messageText);
            }

            messageContainer.appendChild(messageDiv);
            document.getElementById('message-container').appendChild(messageContainer);
            scrollToBottom();
        }

        function scrollToBottom() {
            const messageContainer = document.getElementById('message-container');
            messageContainer.scrollTop = messageContainer.scrollHeight;
        }

        // Video call functionality
        const configuration = {
            iceServers: [
                { urls: 'stun:stun.l.google.com:19302' }
            ]
        };

        async function startVideoCall() {
            try {
                // First get user media
                localStream = await navigator.mediaDevices.getUserMedia({ 
                    video: true, 
                    audio: true 
                });
                
                // Show video area and local video
                document.getElementById('videoArea').classList.remove('hidden');
                document.getElementById('chatArea').classList.add('w-1/2');
                document.querySelector('#localVideo video').srcObject = localStream;

                // Create peer connection
                if (peerConnection) {
                    peerConnection.close();
                }
                peerConnection = new RTCPeerConnection(configuration);

                // Add local stream tracks to peer connection
                localStream.getTracks().forEach(track => {
                    peerConnection.addTrack(track, localStream);
                });

                // Handle ICE candidates
                peerConnection.onicecandidate = event => {
                    if (event.candidate) {
                        console.log('Sending ICE candidate to:', friendId);
                        socket.emit('iceCandidate', {
                            target: friendId,
                            candidate: event.candidate
                        });
                    }
                };

                // Handle remote stream
                peerConnection.ontrack = event => {
                    console.log('Received remote stream');
                    const remoteVideo = document.querySelector('#remoteVideo video');
                    if (remoteVideo.srcObject !== event.streams[0]) {
                        remoteVideo.srcObject = event.streams[0];
                    }
                };

                // Create and send offer
                const offer = await peerConnection.createOffer({
                    offerToReceiveAudio: true,
                    offerToReceiveVideo: true
                });
                
                await peerConnection.setLocalDescription(offer);
                console.log('Sending video offer to:', friendId);
                socket.emit('videoOffer', {
                    target: friendId,
                    sdp: offer
                });

            } catch (err) {
                console.error('Error starting video call:', err);
                alert('Could not start video call: ' + err.message);
                endCall();
            }
        }

        // Handle incoming video offer
        socket.on('videoOffer', async (data) => {
            try {
                const { from, sdp } = data;
                console.log('Received video offer from:', from);

                // Get user media if not already available
                if (!localStream) {
                    localStream = await navigator.mediaDevices.getUserMedia({ 
                        video: true, 
                        audio: true 
                    });
                    document.querySelector('#localVideo video').srcObject = localStream;
                }

                // Show video area
                document.getElementById('videoArea').classList.remove('hidden');
                document.getElementById('chatArea').classList.add('w-1/2');

                // Create new peer connection
                if (peerConnection) {
                    peerConnection.close();
                }
                peerConnection = new RTCPeerConnection(configuration);

                // Add local stream tracks
                localStream.getTracks().forEach(track => {
                    peerConnection.addTrack(track, localStream);
                });

                // Handle ICE candidates
                peerConnection.onicecandidate = event => {
                    if (event.candidate) {
                        console.log('Sending ICE candidate to:', from);
                        socket.emit('iceCandidate', {
                            target: from,
                            candidate: event.candidate
                        });
                    }
                };

                // Handle remote stream
                peerConnection.ontrack = event => {
                    console.log('Received remote stream');
                    const remoteVideo = document.querySelector('#remoteVideo video');
                    if (remoteVideo.srcObject !== event.streams[0]) {
                        remoteVideo.srcObject = event.streams[0];
                    }
                };

                // Set remote description
                const remoteDesc = new RTCSessionDescription(sdp);
                await peerConnection.setRemoteDescription(remoteDesc);

                // Create and send answer
                const answer = await peerConnection.createAnswer();
                await peerConnection.setLocalDescription(answer);

                console.log('Sending video answer to:', from);
                socket.emit('videoAnswer', {
                    target: from,
                    sdp: answer
                });

            } catch (err) {
                console.error('Error handling video offer:', err);
                alert('Could not handle video offer: ' + err.message);
                endCall();
            }
        });

        // Handle video answer
        socket.on('videoAnswer', async (data) => {
            try {
                const { from, sdp } = data;
                console.log('Received video answer from:', from);
                
                if (!peerConnection) {
                    console.error('No peer connection exists');
                    return;
                }

                const remoteDesc = new RTCSessionDescription(sdp);
                await peerConnection.setRemoteDescription(remoteDesc);
                console.log('Successfully set remote description');

            } catch (err) {
                console.error('Error handling video answer:', err);
                alert('Could not handle video answer: ' + err.message);
                endCall();
            }
        });

        // Handle ICE candidates
        socket.on('iceCandidate', async (data) => {
            try {
                const { from, candidate } = data;
                console.log('Received ICE candidate from:', from);

                if (!peerConnection) {
                    console.error('No peer connection exists');
                    return;
                }

                await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
                console.log('Successfully added ICE candidate');

            } catch (err) {
                console.error('Error handling ICE candidate:', err);
            }
        });

        // End call function
        function endCall() {
            if (localStream) {
                localStream.getTracks().forEach(track => {
                    track.stop();
                });
                localStream = null;
            }

            if (peerConnection) {
                peerConnection.close();
                peerConnection = null;
            }

            document.getElementById('videoArea').classList.add('hidden');
            document.getElementById('chatArea').classList.remove('w-1/2');
            document.querySelector('#remoteVideo video').srcObject = null;
            document.querySelector('#localVideo video').srcObject = null;

            // Reset button states
            document.getElementById('toggleVideoBtn').innerHTML = '<i class="fas fa-video"></i>';
            document.getElementById('toggleMicBtn').innerHTML = '<i class="fas fa-microphone"></i>';
        }

        // Video call button
        document.getElementById('videoCallBtn').addEventListener('click', startVideoCall);

        // End call button
        document.getElementById('endCallBtn').addEventListener('click', endCall);

        // Toggle video/audio
        document.getElementById('toggleVideoBtn').addEventListener('click', () => {
            if (localStream) {
                const videoTrack = localStream.getVideoTracks()[0];
                videoTrack.enabled = !videoTrack.enabled;
                document.getElementById('toggleVideoBtn').innerHTML = 
                    videoTrack.enabled ? '<i class="fas fa-video"></i>' : '<i class="fas fa-video-slash"></i>';
            }
        });

        document.getElementById('toggleMicBtn').addEventListener('click', () => {
            if (localStream) {
                const audioTrack = localStream.getAudioTracks()[0];
                audioTrack.enabled = !audioTrack.enabled;
                document.getElementById('toggleMicBtn').innerHTML = 
                    audioTrack.enabled ? '<i class="fas fa-microphone"></i>' : '<i class="fas fa-microphone-slash"></i>';
            }
        });
    </script>
</body>
</html>
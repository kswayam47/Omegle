<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat with <%= friend.name %></title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="/socket.io/socket.io.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100 h-screen">
    <div class="container mx-auto p-4 h-full">
        <div class="bg-white rounded-lg shadow-lg h-full flex flex-col">
            <!-- Header -->
            <div class="bg-blue-600 text-white p-4 rounded-t-lg flex justify-between items-center">
                <div class="flex items-center">
                    <a href="/auth/dashboard" class="mr-4">
                        <i class="fas fa-arrow-left"></i>
                    </a>
                    <div>
                        <h1 class="text-xl font-bold"><%= friend.name %></h1>
                        <p class="text-sm" id="status">Online</p>
                    </div>
                </div>
                <div class="flex space-x-4">
                    <button id="videoCallBtn" class="bg-blue-500 hover:bg-blue-700 text-white px-4 py-2 rounded">
                        <i class="fas fa-video"></i>
                    </button>
                    <button id="audioCallBtn" class="bg-blue-500 hover:bg-blue-700 text-white px-4 py-2 rounded">
                        <i class="fas fa-phone"></i>
                    </button>
                </div>
            </div>

            <!-- Chat and Video Area -->
            <div class="flex-1 flex">
                <!-- Chat Area -->
                <div class="flex-1 flex flex-col p-4" id="chatArea">
                    <div id="message-container" class="flex-1 overflow-y-auto space-y-4 mb-4">
                        <!-- Messages will be added here -->
                    </div>
                    <div class="flex items-center space-x-2">
                        <input type="text" id="messagebox" 
                            class="flex-1 border rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Type your message...">
                        <button onclick="sendMessage()" 
                            class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>

                <!-- Video Call Area (hidden by default) -->
                <div id="videoArea" class="hidden w-1/2 bg-gray-900 p-4 flex flex-col">
                    <div id="remoteVideo" class="flex-1 bg-black rounded-lg mb-4">
                        <video class="w-full h-full object-cover rounded-lg" autoplay playsinline></video>
                    </div>
                    <div id="localVideo" class="w-1/4 absolute bottom-8 right-8 bg-black rounded-lg">
                        <video class="w-full h-full object-cover rounded-lg" autoplay playsinline muted></video>
                    </div>
                    <div class="flex justify-center space-x-4 mt-4">
                        <button id="toggleMicBtn" class="bg-gray-600 hover:bg-gray-700 text-white p-3 rounded-full">
                            <i class="fas fa-microphone"></i>
                        </button>
                        <button id="toggleVideoBtn" class="bg-gray-600 hover:bg-gray-700 text-white p-3 rounded-full">
                            <i class="fas fa-video"></i>
                        </button>
                        <button id="endCallBtn" class="bg-red-600 hover:bg-red-700 text-white p-3 rounded-full">
                            <i class="fas fa-phone-slash"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Connect to friend-specific socket for online status
        const socket = io('http://localhost:5000', {
            path: '/friend-socket',
            withCredentials: true
        });

        // Store current user's uniqueId and friend's uniqueId
        const myUniqueId = '<%= user.uniqueId %>';
        const friendId = '<%= friend.uniqueId %>';
        let peerConnection = null;
        let localStream = null;

        // Connect to socket.io
        socket.on('connect', () => {
            console.log('Connected to friend socket in chat. My ID:', myUniqueId);
            // Send online status immediately on connect
            socket.emit('userOnline', { uniqueId: myUniqueId });
            // Join private room for chat
            socket.emit('joinPrivateRoom', { friendId });
        });

        // Handle private messages
        socket.on('privateMessage', (data) => {
            const { userId, message } = data;
            console.log('Received message:', { from: userId, message });
            const messageContainer = document.getElementById('message-container');
            const messageDiv = document.createElement('div');
            messageDiv.className = userId === myUniqueId ? 
                'bg-blue-500 text-white ml-auto rounded-lg p-3 max-w-[70%] mb-2' : 
                'bg-gray-100 mr-auto rounded-lg p-3 max-w-[70%] mb-2';
            messageDiv.textContent = message;
            messageContainer.appendChild(messageDiv);
            messageContainer.scrollTop = messageContainer.scrollHeight;
        });

        // Send message function
        function sendMessage() {
            const messageInput = document.getElementById('messagebox');
            const message = messageInput.value.trim();
            if (message) {
                const roomId = [myUniqueId, friendId].sort().join('-');
                console.log('Sending message:', { to: friendId, message, roomId });
                socket.emit('privateMessage', { roomId, message });
                messageInput.value = '';
            }
        }

        // Handle enter key
        document.getElementById('messagebox').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        // Video call functionality
        const configuration = {
            iceServers: [
                { urls: 'stun:stun.l.google.com:19302' }
            ]
        };

        async function startVideoCall() {
            try {
                // First get user media
                localStream = await navigator.mediaDevices.getUserMedia({ 
                    video: true, 
                    audio: true 
                });
                
                // Show video area and local video
                document.getElementById('videoArea').classList.remove('hidden');
                document.getElementById('chatArea').classList.add('w-1/2');
                document.querySelector('#localVideo video').srcObject = localStream;

                // Create peer connection
                if (peerConnection) {
                    peerConnection.close();
                }
                peerConnection = new RTCPeerConnection(configuration);

                // Add local stream tracks to peer connection
                localStream.getTracks().forEach(track => {
                    peerConnection.addTrack(track, localStream);
                });

                // Handle ICE candidates
                peerConnection.onicecandidate = event => {
                    if (event.candidate) {
                        console.log('Sending ICE candidate to:', friendId);
                        socket.emit('iceCandidate', {
                            target: friendId,
                            candidate: event.candidate
                        });
                    }
                };

                // Handle remote stream
                peerConnection.ontrack = event => {
                    console.log('Received remote stream');
                    const remoteVideo = document.querySelector('#remoteVideo video');
                    if (remoteVideo.srcObject !== event.streams[0]) {
                        remoteVideo.srcObject = event.streams[0];
                    }
                };

                // Create and send offer
                const offer = await peerConnection.createOffer({
                    offerToReceiveAudio: true,
                    offerToReceiveVideo: true
                });
                
                await peerConnection.setLocalDescription(offer);
                console.log('Sending video offer to:', friendId);
                socket.emit('videoOffer', {
                    target: friendId,
                    sdp: offer
                });

            } catch (err) {
                console.error('Error starting video call:', err);
                alert('Could not start video call: ' + err.message);
                endCall();
            }
        }

        // Handle incoming video offer
        socket.on('videoOffer', async (data) => {
            try {
                const { from, sdp } = data;
                console.log('Received video offer from:', from);

                // Get user media if not already available
                if (!localStream) {
                    localStream = await navigator.mediaDevices.getUserMedia({ 
                        video: true, 
                        audio: true 
                    });
                    document.querySelector('#localVideo video').srcObject = localStream;
                }

                // Show video area
                document.getElementById('videoArea').classList.remove('hidden');
                document.getElementById('chatArea').classList.add('w-1/2');

                // Create new peer connection
                if (peerConnection) {
                    peerConnection.close();
                }
                peerConnection = new RTCPeerConnection(configuration);

                // Add local stream tracks
                localStream.getTracks().forEach(track => {
                    peerConnection.addTrack(track, localStream);
                });

                // Handle ICE candidates
                peerConnection.onicecandidate = event => {
                    if (event.candidate) {
                        console.log('Sending ICE candidate to:', from);
                        socket.emit('iceCandidate', {
                            target: from,
                            candidate: event.candidate
                        });
                    }
                };

                // Handle remote stream
                peerConnection.ontrack = event => {
                    console.log('Received remote stream');
                    const remoteVideo = document.querySelector('#remoteVideo video');
                    if (remoteVideo.srcObject !== event.streams[0]) {
                        remoteVideo.srcObject = event.streams[0];
                    }
                };

                // Set remote description
                const remoteDesc = new RTCSessionDescription(sdp);
                await peerConnection.setRemoteDescription(remoteDesc);

                // Create and send answer
                const answer = await peerConnection.createAnswer();
                await peerConnection.setLocalDescription(answer);

                console.log('Sending video answer to:', from);
                socket.emit('videoAnswer', {
                    target: from,
                    sdp: answer
                });

            } catch (err) {
                console.error('Error handling video offer:', err);
                alert('Could not handle video offer: ' + err.message);
                endCall();
            }
        });

        // Handle video answer
        socket.on('videoAnswer', async (data) => {
            try {
                const { from, sdp } = data;
                console.log('Received video answer from:', from);
                
                if (!peerConnection) {
                    console.error('No peer connection exists');
                    return;
                }

                const remoteDesc = new RTCSessionDescription(sdp);
                await peerConnection.setRemoteDescription(remoteDesc);
                console.log('Successfully set remote description');

            } catch (err) {
                console.error('Error handling video answer:', err);
                alert('Could not handle video answer: ' + err.message);
                endCall();
            }
        });

        // Handle ICE candidates
        socket.on('iceCandidate', async (data) => {
            try {
                const { from, candidate } = data;
                console.log('Received ICE candidate from:', from);

                if (!peerConnection) {
                    console.error('No peer connection exists');
                    return;
                }

                await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
                console.log('Successfully added ICE candidate');

            } catch (err) {
                console.error('Error handling ICE candidate:', err);
            }
        });

        // End call function
        function endCall() {
            if (localStream) {
                localStream.getTracks().forEach(track => {
                    track.stop();
                });
                localStream = null;
            }

            if (peerConnection) {
                peerConnection.close();
                peerConnection = null;
            }

            document.getElementById('videoArea').classList.add('hidden');
            document.getElementById('chatArea').classList.remove('w-1/2');
            document.querySelector('#remoteVideo video').srcObject = null;
            document.querySelector('#localVideo video').srcObject = null;

            // Reset button states
            document.getElementById('toggleVideoBtn').innerHTML = '<i class="fas fa-video"></i>';
            document.getElementById('toggleMicBtn').innerHTML = '<i class="fas fa-microphone"></i>';
        }

        // Video call button
        document.getElementById('videoCallBtn').addEventListener('click', startVideoCall);

        // End call button
        document.getElementById('endCallBtn').addEventListener('click', endCall);

        // Toggle video/audio
        document.getElementById('toggleVideoBtn').addEventListener('click', () => {
            if (localStream) {
                const videoTrack = localStream.getVideoTracks()[0];
                videoTrack.enabled = !videoTrack.enabled;
                document.getElementById('toggleVideoBtn').innerHTML = 
                    videoTrack.enabled ? '<i class="fas fa-video"></i>' : '<i class="fas fa-video-slash"></i>';
            }
        });

        document.getElementById('toggleMicBtn').addEventListener('click', () => {
            if (localStream) {
                const audioTrack = localStream.getAudioTracks()[0];
                audioTrack.enabled = !audioTrack.enabled;
                document.getElementById('toggleMicBtn').innerHTML = 
                    audioTrack.enabled ? '<i class="fas fa-microphone"></i>' : '<i class="fas fa-microphone-slash"></i>';
            }
        });
    </script>
</body>
</html>